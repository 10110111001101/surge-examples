Clawpack git diffs...

===========
classic
===========
/Users/mandli/src/clawpack/classic

diff --git a/examples/acoustics_1d_example1/Makefile b/examples/acoustics_1d_example1/Makefile
index b46cff5..cb55655 100644
--- a/examples/acoustics_1d_example1/Makefile
+++ b/examples/acoustics_1d_example1/Makefile
@@ -55,5 +55,4 @@ SOURCES = \
 
 #-------------------------------------------------------------------
 # Include Makefile containing standard definitions and make options:
-include $(CLAWMAKE)
-
+include $(CLAWMAKE)
\ No newline at end of file


===========
amrclaw
===========
/Users/mandli/src/clawpack/amrclaw



===========
clawutil
===========
/Users/mandli/src/clawpack/clawutil



===========
pyclaw
===========
/Users/mandli/src/clawpack/pyclaw



===========
visclaw
===========
/Users/mandli/src/clawpack/visclaw



===========
riemann
===========
/Users/mandli/src/clawpack/riemann

diff --git a/src/rpn2_layered_shallow_water.f90 b/src/rpn2_layered_shallow_water.f90
index 21589b5..032c7dd 100644
--- a/src/rpn2_layered_shallow_water.f90
+++ b/src/rpn2_layered_shallow_water.f90
@@ -60,7 +60,7 @@ subroutine rpn2(ixy,maxm,meqn,mwaves,maux,mbc,mx,ql,qr,auxl,auxr,fwave,s,amdq,ap
 
     ! Input arguments
     integer, intent(in) :: ixy,maxm,meqn,mwaves,mbc,mx,maux
-    real(kind=8), dimension(meqn,1-mbc:maxm+mbc), intent(in) :: ql, qr
+    real(kind=8), dimension(meqn,1-mbc:maxm+mbc), intent(in out) :: ql, qr
     real(kind=8), dimension(maux,1-mbc:maxm+mbc), intent(in) :: auxl, auxr
 
     ! Output arguments
@@ -119,6 +119,8 @@ subroutine rpn2(ixy,maxm,meqn,mwaves,maux,mbc,mx,ql,qr,auxl,auxr,fwave,s,amdq,ap
     ! Initialize output variables
     amdq = 0.d0
     apdq = 0.d0
+    fwave = 0.d0
+    s = 0.d0
     
     ! Set normal direction
     if (ixy == 1) then
@@ -140,9 +142,22 @@ subroutine rpn2(ixy,maxm,meqn,mwaves,maux,mbc,mx,ql,qr,auxl,auxr,fwave,s,amdq,ap
         ! Parse states and set appropriate zeros
         ! Note that the "u-direction" is the direction of sweeping which 
         ! could actually be the x or y-directions depending on ixy
-        
         do j=1,2
             layer_index = 3*(j-1)
+
+            ! Zero-out (small) negative states
+            if (qr(1 + layer_index, i-1) < tiny(1.d0)) then
+                ! if (j == 1) then
+                !     print *, 1 + layer_index, i
+                !     print *, qr(1:3 + layer_index, i - 1)
+                !     stop
+                ! end if
+                qr(1:3 + layer_index, i-1) = 0.d0
+            end if
+            if (ql(1 + layer_index, i) < tiny(1.d0)) then
+                ql(1:3 + layer_index, i) = 0.d0
+            end if
+
             h_l(j) = qr(layer_index+1,i-1) / rho(j)
             hu_l(j) = qr(layer_index+n_index,i-1) / rho(j)
             hv_l(j) = qr(layer_index+t_index,i-1) / rho(j)
@@ -270,6 +285,8 @@ subroutine rpn2(ixy,maxm,meqn,mwaves,maux,mbc,mx,ql,qr,auxl,auxr,fwave,s,amdq,ap
         !     *inundation_method* is used.
         ! ======================================================================
         else
+            stop "Two-layer solving"
+
             ! By default fill in the eigen and flux evaluation states with their
             ! side values
             if (eigen_method == 1) then
@@ -928,8 +945,8 @@ subroutine solve_single_layer_rp(layer_index, h_l, h_r, hu_l, hu_r, hv_l, hv_r,
 !         call riemann_ssqfwave(maxiter,meqn,mwaves,hL,hR,huL,huR,
 !     &     hvL,hvR,bL,bR,uL,uR,vL,vR,phiL,phiR,sE1,sE2,drytol,g,sw,fw)
 
-!          call riemann_fwave(meqn,mwaves,hL,hR,huL,huR,hvL,hvR,
-!     &      bL,bR,uL,uR,vL,vR,phiL,phiR,sE1,sE2,drytol,g,sw,fw)
+         ! call riemann_fwave(3,3,hL,hR,huL,huR,hvL,hvR,          &
+         !   bL,bR,uL,uR,vL,vR,phiL,phiR,sE1,sE2,drytol,g,sw,fw)
 
 !        !eliminate ghost fluxes for wall
          do mw=1,3


===========
geoclaw
===========
/Users/mandli/src/clawpack/geoclaw

diff --git a/src/2d/shallow/surge/holland_storm_module.f90 b/src/2d/shallow/surge/holland_storm_module.f90
index 38a4015..c5da59d 100644
--- a/src/2d/shallow/surge/holland_storm_module.f90
+++ b/src/2d/shallow/surge/holland_storm_module.f90
@@ -121,6 +121,7 @@ contains
                     read(data_file,fmt=NOAA_FORMAT,iostat=io_status) year,month,day, &
                         hour,cast_type,forecast,lat,direction(2),lon,direction(1), &
                         max_wind_speed,central_pressure,RRP,max_wind_radius
+                    print *, RRP, max_wind_radius
                 else if (file_format == "JAM") then
                     ! JAM may be missing RRP parameter, may need to set this based
                     ! on other data in the file.  It is only used in the field 
@@ -142,6 +143,7 @@ contains
                 endif
                 last_time = forecast_time
             end do
+            stop
             rewind(data_file)
 
             write(log_unit,"('Forecasts = ',i3)") num_casts
diff --git a/src/python/geoclaw/topotools.py b/src/python/geoclaw/topotools.py
index 85a8fff..f8c42e0 100644
--- a/src/python/geoclaw/topotools.py
+++ b/src/python/geoclaw/topotools.py
@@ -661,9 +661,9 @@ class Topography(object):
 
                 # NetCDF4 GEBCO topography
                 with netCDF4.Dataset(self.path, 'r', format="NETCDF4") as nc_file:
-                    x_var = nc_params.get('x_var', None)
-                    y_var = nc_params.get('y_var', None)
-                    z_var = nc_params.get('z_var', None)
+                    x_var = nc_params.get('x_var', "lon")
+                    y_var = nc_params.get('y_var', "lat")
+                    z_var = nc_params.get('z_var', "elevation")
                     for (key, var) in nc_file.variables.iteritems():
                         if 'axis' in var.ncattrs():
                             if var.axis.lower() == "x" and x_var is None:
